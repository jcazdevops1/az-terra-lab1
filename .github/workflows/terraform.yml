# Give the workflow a display name, which will show under the **Actions** section in GitHub
name: Deploy Terraform

# Describe when we want this workflow to trigger
on:
  # When files are changed in the `terraform` directory in a push to the `deploy` branch
  push:
    branches:
      - deploy
    paths:
      - infrastructure/terraform/**
  # When files are changed in the `terraform` directory in a pull request with a base of the `deploy` branch
  pull_request:
    branches:
      - deploy
    paths:
      - infrastructure/terraform/**
  # When ran manually
  workflow_dispatch:

# Set the permissions this workflow has to the repo
permissions:
  # Read code - used by the Checkout step
  contents: read
  # Write token - used by login operations
  id-token: write

# Create environment variables for each of the secrets that we created earlier - these will be used by Terraform within the workflow so long as the deploy environment is set below
env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

# Create a single job for Terraform
jobs:
  terraform:
    # Give it a display name
    name: Terraform
    # Set it to run in a GitHub Hosted runner in a container based on the latest Ubuntu release
    runs-on: ubuntu-latest
    # Set the default shell to use `bash` and to ensure that everything uses your terraform directory as the working directory
    defaults:
      run:
        shell: bash
        working-directory: ./infrastructure/terraform
    # Configure the terraform job to use the deploy environment
    environment: deploy

    # Create a series of steps to walk Terraform through each of the processes that we require
    steps:
      # Clone the source code from your GitHub repo to temporary container so that it can be used by Terraform
      - name: Checkout
        uses: actions/checkout@v4

      # Login into Azure using OIDC, this login will be used by Terraform in the following steps
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Download Terraform itself and ensure that it's ready to run, we specify that we want to use version 1.8 of Terraform
      - name: Terraform Setup
        # We specify an ID that we can refer to in later steps, if for example, we want to see the outcome (success/fail) of the step
        id: setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.x
          terraform_wrapper: false

      # Instruct Terraform to connect to your state file (creating it if necessary)
      - name: Terraform Init
        id: init
        run: terraform init

      # Instruct Terraform to validate the syntax of your code
      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Instruct Terraform to plan out what actions it would take, i.e. what resources would be created, modified, destroyed
      # Note the 'tfplan' in command, which outputs the plan to a file
      - name: Terraform Plan
        id: plan
        run: terraform plan -out tfplan

      # Instruct Terraform to apply the changes in the plan above, but only if this workflow was triggered by a push - in our scenario, this could only occur as a result of a merge of a pull request into the deploy branch
      # Note the 'tfplan` in the command, which inputs the plan from the file created in the previous step so that it doesn't have to be performed again
      - name: Terraform Apply
        if: github.event_name == 'push'
        id: apply
        run: terraform apply -auto-approve tfplan